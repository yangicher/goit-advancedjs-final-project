import{a as f}from"./assets/vendor-DDD7fsZd.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))s(a);new MutationObserver(a=>{for(const r of a)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function t(a){const r={};return a.integrity&&(r.integrity=a.integrity),a.referrerPolicy&&(r.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?r.credentials="include":a.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(a){if(a.ep)return;a.ep=!0;const r=t(a);fetch(a.href,r)}})();const v="https://your-energy.b.goit.study/api/";f.defaults.headers.post["Content-Type"]="application/json";const p=async(i,e)=>{try{return(await f.get(`${v}${i}`,{params:e})).data}catch(t){throw console.error("Error in get:",t),t}},l={FILTERS_PER_PAGE:12,EXERCISES_PER_PAGE:10,SEARCH_DEBOUNCE_DELAY:1e3,ANIMATION_DURATION:0,DEFAULT_FILTER:"Muscles"},h={musclesGrid:"#muscles-grid",tabs:".tab",searchSection:"#search-section",breadcrumb:"#breadcrumb",searchInput:".search-input",searchClearBtn:"#search-clear-btn"},d={MUSCLES:"Muscles",BODY_PARTS:"Body parts",EQUIPMENT:"Equipment"};class L{constructor(){this.currentPage=1,this.totalPages=1,this.currentFilter=l.DEFAULT_FILTER,this.selectedBodyPart="",this.allExercises=[],this.filteredExercises=[],this.currentHeight=0,this.searchTimeout=null}reset(){this.currentPage=1,this.totalPages=1,this.allExercises=[],this.filteredExercises=[],this.selectedBodyPart="",this.clearSearchTimeout()}clearSearchTimeout(){this.searchTimeout&&(clearTimeout(this.searchTimeout),this.searchTimeout=null)}}class c{static getElementById(e){return document.getElementById(e.replace("#",""))}static querySelectorAll(e){return document.querySelectorAll(e)}static show(e){e.style.display="block"}static hide(e){e.style.display="none"}static setContent(e,t){e.innerHTML=t}static measureContentHeight(e,t){const s=document.createElement("div");Object.assign(s.style,{visibility:"hidden",position:"absolute",top:"-9999px",width:`${t}px`}),s.innerHTML=e,document.body.appendChild(s);const a=s.scrollHeight;return document.body.removeChild(s),a}static animateHeight(e,t,s=l.ANIMATION_DURATION){e.style.height=`${t}px`,setTimeout(()=>{e.style.height="auto"},s)}}class m{static async fetchFilters(e,t=1){return await p("filters",{filter:e,page:t,limit:l.FILTERS_PER_PAGE})}static async fetchExercises(e,t,s=1){const a={page:s,limit:l.EXERCISES_PER_PAGE};switch(t){case d.BODY_PARTS:a.bodypart=e;break;case d.MUSCLES:a.muscles=e;break;case d.EQUIPMENT:a.equipment=e;break}return await p("exercises",a)}}class o{static filterCard(e){return`
      <div class="muscle-card" data-filter="${e.name}" data-filter-type="${e.filter}">
        <img src="${e.imgURL}" alt="${e.name}" class="muscle-card-img" />
        <div class="muscle-card-label">
          <span class="muscle-card-title">${e.name}</span>
          <span class="muscle-card-subtitle">${e.filter}</span>
        </div>
      </div>
    `}static exerciseCard(e){return`
      <div class="exercise-item">
        <div class="exercise-top-row">
          <div class="workout-rating-left">
            <div class="workout-badge">WORKOUT</div>
            <div class="rating">
              ${e.rating} <span class="star"><img src="/img/icons/star.svg" alt="star" /></span>
            </div>
          </div>
          <button class="start-btn">Start <span class="arrow"><img src="/img/icons/start-arrow.svg" alt="Start" /></span></button>
        </div>
        <div class="exercise-middle-row">
          <div class="exercise-icon"><img src="/img/icons/exercise-icon.svg" /></div>
          <h3 class="exercise-title">${e.name}</h3>
        </div>
        <div class="exercise-bottom-row">
          <span><span class="meta-label">Burned calories:</span> <span class="meta-value">${e.burnedCalories}</span></span>
          <span><span class="meta-label">Body part:</span> <span class="meta-value">${e.bodyPart}</span></span>
          <span><span class="meta-label">Target:</span> <span class="meta-value">${e.target}</span></span>
        </div>
      </div>
    `}static pagination(e,t){if(t<=1)return"";const s=[];return s.push(`
      <button class="page-btn nav-btn prev" ${e===1?"disabled":""} data-page="prev"></button>
    `),s.push(o.generatePageNumbers(e,t)),s.push(`
      <button class="page-btn nav-btn next" ${e===t?"disabled":""} data-page="next"></button>
    `),`<div class="muscles-pagination">${s.join("")}</div>`}static generatePageNumbers(e,t){const s=[];if(t<=5)for(let a=1;a<=t;a++)s.push(`<button class="page-btn ${a===e?"active":""}" data-page="${a}">${a}</button>`);else{s.push(`<button class="page-btn ${e===1?"active":""}" data-page="1">1</button>`),e>3&&s.push('<span class="page-dots">...</span>');const a=Math.max(2,e-1),r=Math.min(t-1,e+1);for(let n=a;n<=r;n++)n!==1&&n!==t&&s.push(`<button class="page-btn ${n===e?"active":""}" data-page="${n}">${n}</button>`);e<t-2&&s.push('<span class="page-dots">...</span>'),t>1&&s.push(`<button class="page-btn ${t===e?"active":""}" data-page="${t}">${t}</button>`)}return s.join("")}static loadingTemplate(e){return`<div class="loading" style="height: ${e-80}px;">Loading...</div>`}static errorTemplate(e){return`<div class="error">${e}</div>`}static contentWrapper(e,t=""){return`
      <div class="content-wrapper">
        <div class="content-area">${e}</div>
        ${t?`<div class="pagination-area">${t}</div>`:""}
      </div>
    `}}class x{constructor(){if(this.state=new L,this.elements=this.initializeElements(),!this.elements){console.error("Failed to initialize ExercisesManager: required DOM elements not found");return}this.setupEventListeners()}initializeElements(){const e={musclesGrid:c.getElementById(h.musclesGrid),tabs:c.querySelectorAll(h.tabs),searchSection:c.getElementById(h.searchSection),breadcrumb:c.getElementById(h.breadcrumb),searchClearBtn:c.getElementById(h.searchClearBtn)};return!e.musclesGrid||!e.searchSection?(console.error("Essential DOM elements not found for exercises functionality"),null):(e.searchInput=e.searchSection.querySelector(h.searchInput),e)}setupEventListeners(){this.setupTabListeners(),this.setupSearchListeners()}setupTabListeners(){this.elements.tabs.forEach(e=>{e.addEventListener("click",()=>this.handleTabSwitch(e))})}setupSearchListeners(){this.elements.searchInput.addEventListener("input",e=>this.handleSearchInput(e)),this.elements.searchInput.addEventListener("keydown",e=>this.handleSearchKeydown(e)),this.elements.searchClearBtn.addEventListener("click",e=>this.handleSearchClear(e))}async renderFilters(e=l.DEFAULT_FILTER,t=1){this.hideSearchAndBreadcrumb(),this.state.selectedBodyPart="",this.prepareContainer();try{const s=await m.fetchFilters(e,t);if(this.updateFilterState(s,e),!s.results.length){this.showError("No items found.");return}const a=this.buildFiltersContent(s.results),r=o.pagination(t,this.state.totalPages),n=o.contentWrapper(a,r);this.updateContainerWithAnimation(n),this.attachFilterEventListeners()}catch{this.showError("Failed to load data.")}}async renderExercisesList(e,t,s="",a=1){this.showSearchAndBreadcrumb(e),s||this.clearSearchInput(),this.prepareContainer();try{const r=await m.fetchExercises(e,t,a);this.updateExercisesState(r,e);const n=this.filterExercises(s);if(n.length===0){this.showNoExercisesFound(s);return}const b=this.buildExercisesContent(n,e),S=s?"":o.pagination(a,this.state.totalPages),y=o.contentWrapper(b,S);this.updateContainerWithAnimation(y),this.attachExercisesEventListeners(s)}catch{this.showError("Failed to load exercises.")}}buildFiltersContent(e){return`<div class="muscles-cards-wrapper">${e.map(s=>o.filterCard(s)).join("")}</div>`}buildExercisesContent(e,t){const s=e.map(r=>o.exerciseCard(r)).join(""),a=`<button class="back-btn"><span class="arrow">←</span> Back to ${this.state.currentFilter}</button>`;return`<div class="exercises-list">${s}</div>${a}`}updateFilterState(e,t){this.state.totalPages=e.totalPages,this.state.currentFilter=t}updateExercisesState(e,t){this.state.allExercises=e.results||[],this.state.totalPages=e.totalPages||1,this.state.selectedBodyPart=t}filterExercises(e){return e?this.state.filteredExercises=this.state.allExercises.filter(t=>t.name.toLowerCase().includes(e.toLowerCase())):this.state.filteredExercises=[...this.state.allExercises],this.state.filteredExercises}hideSearchAndBreadcrumb(){c.hide(this.elements.searchSection),c.hide(this.elements.breadcrumb)}showSearchAndBreadcrumb(e){c.show(this.elements.searchSection),c.show(this.elements.breadcrumb),this.elements.breadcrumb.textContent=`/ ${e.charAt(0).toUpperCase()+e.slice(1)}`}prepareContainer(){this.state.currentHeight===0&&(this.state.currentHeight=this.elements.musclesGrid.getBoundingClientRect().height||600),this.elements.musclesGrid.style.height=`${this.state.currentHeight}px`,c.setContent(this.elements.musclesGrid,o.loadingTemplate(this.state.currentHeight))}updateContainerWithAnimation(e){const t=c.measureContentHeight(e,this.elements.musclesGrid.offsetWidth);c.setContent(this.elements.musclesGrid,e),c.animateHeight(this.elements.musclesGrid,t),this.state.currentHeight=t}showError(e){c.setContent(this.elements.musclesGrid,o.errorTemplate(e))}showNoExercisesFound(e){const t=`No exercises found${e?` matching "${e}"`:""}.`,s=`<button class="back-btn"><span class="arrow">←</span> Back to ${this.state.currentFilter}</button>`;c.setContent(this.elements.musclesGrid,o.errorTemplate(t)+s),this.attachBackButtonListener()}handleTabSwitch(e){this.elements.tabs.forEach(a=>a.classList.remove("active")),e.classList.add("active"),this.state.reset(),this.clearSearchInput();const s={muscles:d.MUSCLES,"body-parts":d.BODY_PARTS,equipment:d.EQUIPMENT}[e.dataset.tab]||l.DEFAULT_FILTER;this.renderFilters(s,1)}handleSearchInput(e){const t=e.target.value.trim();this.updateSearchClearButton(),this.state.clearSearchTimeout(),this.state.searchTimeout=setTimeout(()=>{this.performSearch(t)},l.SEARCH_DEBOUNCE_DELAY)}handleSearchKeydown(e){e.key==="Enter"&&(e.preventDefault(),this.state.clearSearchTimeout(),this.performSearch(e.target.value.trim()))}handleSearchClear(e){e.preventDefault(),this.clearSearch()}performSearch(e){this.state.selectedBodyPart&&this.renderExercisesList(this.state.selectedBodyPart,this.state.currentFilter,e,1)}clearSearch(){this.elements.searchInput.value="",this.updateSearchClearButton(),this.state.clearSearchTimeout(),this.state.selectedBodyPart&&this.performSearch("")}clearSearchInput(){this.elements.searchInput.value="",this.updateSearchClearButton()}updateSearchClearButton(){const e=this.elements.searchInput.value.trim().length>0;this.elements.searchClearBtn.style.display=e?"flex":"none"}attachFilterEventListeners(){this.attachFilterCardListeners(),this.attachPaginationListeners("filters")}attachExercisesEventListeners(e){this.attachBackButtonListener(),e||this.attachPaginationListeners("exercises")}attachFilterCardListeners(){this.elements.musclesGrid.querySelectorAll(".muscle-card").forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.filter,s=e.dataset.filterType;this.renderExercisesList(t,s,"",1)})})}attachBackButtonListener(){const e=this.elements.musclesGrid.querySelector(".back-btn");e&&e.addEventListener("click",()=>{this.state.reset(),this.clearSearchInput(),this.renderFilters(this.state.currentFilter,1)})}attachPaginationListeners(e){this.elements.musclesGrid.querySelectorAll(".page-btn").forEach(t=>{t.addEventListener("click",()=>this.handlePagination(t,e))})}handlePagination(e,t){const{page:s}=e.dataset;let a=this.state.currentPage;s==="prev"&&this.state.currentPage>1?a=this.state.currentPage-1:s==="next"&&this.state.currentPage<this.state.totalPages?a=this.state.currentPage+1:s&&!isNaN(s)&&(a=parseInt(s)),a!==this.state.currentPage&&(this.state.currentPage=a,t==="filters"?this.renderFilters(this.state.currentFilter,a):this.renderExercisesList(this.state.selectedBodyPart,this.state.currentFilter,"",a))}init(){this.elements&&this.renderFilters(l.DEFAULT_FILTER,1)}}function g(){new x().init()}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",g):g();let u=document.getElementById("scrollTopButton");u&&(u.onclick=function(){C()});window.onscroll=function(){T()};function T(){document.body.scrollTop>20||document.documentElement.scrollTop>20?u.style.display="block":u.style.display="none"}function C(){document.body.scrollTop=0,document.documentElement.scrollTop=0}window.addEventListener("DOMContentLoaded",async()=>{const i="./partials/quote.html",e=window.innerWidth>=1440;try{const t=await fetch(i);if(!t.ok)throw new Error("Не вдалося завантажити quote.html");const s=await t.text();if(e){const a=document.querySelector(".exercises-sidebar");if(!a){console.error("Не знайдено елемент .exercises-sidebar");return}a.innerHTML=s}else{const a=document.querySelector(".exercises-page");if(!a){console.error("Не знайдено елемент .exercises-page");return}console.log(s),a.insertAdjacentHTML("afterend",s)}await w()}catch(t){console.error("Помилка завантаження quote.html:",t)}});async function w(){const i=localStorage.getItem("quoteData"),e=new Date().toISOString().slice(0,10);if(i){const a=JSON.parse(i);if(a.date===e){E(a);return}}const t=await p("quote"),s={date:e,author:t.author,quote:t.quote};localStorage.setItem("quoteData",JSON.stringify(s)),E(s)}function E(i){const e=document.querySelector(".js-quote"),t=document.querySelector(".js-author");!i||!e||!t||(e.textContent=i.quote,t.textContent=i.author)}
//# sourceMappingURL=commonHelpers.js.map
